/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

export interface GraphUserUpdateable_V1 {
  // About Me
  aboutMe?: string;
  // Birthday
  birthday?: string;
  // Interests
  interests?: string[];
  // My Site
  mySite?: string;
  // Past Projects
  pastProjects?: string[];
  // Schools
  schools?: string[];
  // Skills
  skills?: string[];
}

export interface GraphTrending {
  // Unique identifier of the relationship
  id?: string;
  // Value indicating how much the document is currently trending
  weight?: number;
  resourceVisualization?: resourceVisualization;
  sensitivityLabelInfo?: sensitivityLabelMetadata[];
}

export interface resourceVisualization {
  // The item's title text
  title?: string;
  // The item's media type (can be used for filtering for a specific file based on a specific type)
  type?: string;
  // The items media type (can be used for filtering for a specific type of file based on supported IANA Media MIME types)
  mediaType?: string;
  // A URL leading to the preview image for the item
  previewImageUrl?: string;
  // A preview text for the item
  previewText?: string;
  // A path leading to the folder in which the item is stored
  containerWebUrl?: string;
  // A string describing where the item is stored
  containerDisplayName?: string;
  // Can be used for filtering by the type of container in which the file is stored
  containerType?: string;
}

export interface sensitivityLabelMetadata {
  // SensitivityLabel Id.
  sensitivityLabelId?: string;
  // SensitivityLabel name.
  name?: string;
  // SensitivityLabel displayName info
  displayName?: string;
  // SensitivityLabel details on tooltip.
  tooltip?: string;
  // SensitivityLabel priority.
  priority?: number;
  // SensitivityLabel color.
  color?: string;
  //  is SensitivityLabel Encrypted.
  isEncrypted?: boolean;
  // Whether SensitivityLabel is Enabled.
  isEnabled?: boolean;
  // Whether SensitivityLabel is Parent.
  isParent?: boolean;
  // Parent SensitivityLabel Id.
  parentSensitivityLabelId?: string;
}

export interface LinklessEntityListResponse_List_Person {
  // Value
  value?: Person[];
}

export interface Person {
  // A unique identifier for the Person object in the directory
  id?: string;
  // The person's display name
  displayName?: string;
  // The person's given name
  givenName?: string;
  // The person's surname
  surname?: string;
  // The person's birthday
  birthday?: string;
  // Free-form notes that the current user has taken about this person
  personNotes?: string;
  // If the current user has flagged this person as a favorite
  isFavorite?: boolean;
  // The person's job title
  jobTitle?: string;
  // The name of the person's company
  companyName?: string;
  // The person's department
  department?: string;
  // The location of the person's office
  officeLocation?: string;
  // The person's profession
  profession?: string;
  // The user principal name(UPN) of the user.The UPN is an Internet-style login name for the user based on the Internet standard RFC 822. By convention, this should map to the user's email name.The general format is alias @domain, where domain must be present in the tenant's collection of verified domains.
  userPrincipalName?: string;
  // The person's VOIP SIP address
  imAddress?: string;
  // Collection of the person's email addresses with a relevance score
  scoredEmailAddresses?: ScoredEmailAddress[];
  // The person's phone numbers
  phones?: Phone[];
}

export interface ScoredEmailAddress {
  // The email address
  address?: string;
  // The relevance score of the email address. A relevance score is used as a sort key, in relation to the other returned results. A higher relevance score value corresponds to a more relevant result. Relevance is determined by the user's communication and collaboration patterns and business relationships.
  relevanceScore?: number;
}

export interface Phone {
  // The phone number
  number?: string;
  // The type of phone number. Possible values: home, business, mobile, other, assistant, homeFax, businessFax, otherFax, pager, radio.
  type?: string;
}

export interface User {
  // A unique identifier for the user object in the directory.
  Id: string;
  // true if the account is enabled; otherwise, false. This property is required when a user is created.
  AccountEnabled?: boolean;
  // A list of business phone numbers for the user
  BusinessPhones?: string[];
  // The city in which the user is located.
  City?: string;
  // The name of the company in which the user works.
  CompanyName?: string;
  // The country/region in which the user is located; for example, "US" or "UK".
  Country?: string;
  // The name of the department in which the user works.
  Department?: string;
  // The name displayed in the address book for the user. This is usually the combination of the user's first name, middle initial and last name. This property is required when a user is created and it cannot be cleared during updates.
  DisplayName?: string;
  // The given name (first name) of the user.
  GivenName?: string;
  // The user’s job title.
  JobTitle?: string;
  // The SMTP/email address for the user, for example, "jeff@contoso.onmicrosoft.com". Read-Only.
  Mail?: string;
  // The mail alias for the user. This property must be specified when a user is created.
  MailNickname?: string;
  // The primary cellular telephone number for the user.
  mobilePhone?: string;
  // The office location in the user's place of business.
  OfficeLocation?: string;
  // The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.
  PostalCode?: string;
  // The user's surname (family name or last name).
  Surname?: string;
  // The primary cellular telephone number for the user.
  TelephoneNumber?: string;
  // The user principal name (UPN) of the user. The UPN is an Internet-style login name for the user based on the Internet standard RFC 822. By convention, this should map to the user’s email name. The general format is alias@domain, where domain must be present in the tenant’s collection of verified domains.
  UserPrincipalName?: string;
}

export interface ClientPhotoMetadata {
  // Has photo
  HasPhoto?: boolean;
  // Height of photo
  Height?: number;
  // Width of photo
  Width?: number;
  // Content Type of photo
  ContentType?: string;
  // File extension for the photo (ex: ".jpg")
  ImageFileExtension?: string;
}

export type Object = object;

export interface EntityListResponse_IReadOnlyList_User {
  // Value
  value?: User[];
  // Next page link
  "@odata.nextLink"?: string;
}

export interface GraphUser_V1 {
  // About Me
  aboutMe?: string;
  // true if the account is enabled; otherwise, false. This property is required when a user is created.
  accountEnabled?: boolean;
  // Birthday
  birthday?: string;
  // Business Phones
  businessPhones?: string[];
  // The city in which the user is located.
  city?: string;
  // The name of the company in which the user works.
  companyName?: string;
  // The country/region in which the user is located; for example, "US" or "UK".
  country?: string;
  // The name of the department in which the user works.
  department?: string;
  // Display Name
  displayName?: string;
  // Given Name
  givenName?: string;
  // Hire Date
  hireDate?: string;
  // Id
  id?: string;
  // Interests
  interests?: string[];
  // Job Title
  jobTitle?: string;
  // Mail
  mail?: string;
  // The mail alias for the user. This property must be specified when a user is created.
  mailNickname?: string;
  // Mobile Phone
  mobilePhone?: string;
  // My Site
  mySite?: string;
  // Office Location
  officeLocation?: string;
  // Past Projects
  pastProjects?: string[];
  // The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.
  postalCode?: string;
  // Preferred Language
  preferredLanguage?: string;
  // Preferred Name
  preferredName?: string;
  // Responsibilities
  responsibilities?: string[];
  // Schools
  schools?: string[];
  // Skills
  skills?: string[];
  // State
  state?: string;
  // Street Address
  streetAddress?: string;
  // Surname
  surname?: string;
  // User Principal Name
  userPrincipalName?: string;
  // User Type
  userType?: string;
}

export type ObjectWithoutType = object;
