/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

import { getPowerSdkInstance } from '@pa-client/power-code-sdk/lib/';
import { dataSourcesInfo } from '../../.power/appschemas/dataSourcesInfo';
import type { IOperationResult } from '@pa-client/power-code-sdk/lib/';
import type { IGetOptions, IGetAllOptions } from '../Models/CommonModels';
import type { Tasks } from '../Models/TasksModel';

export class TasksService {
  private static readonly dataSourceName = 'tasks';

  public static async create(record: Omit<Tasks, 'ID'>): Promise<IOperationResult<Tasks>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.createRecordAsync<Omit<Tasks, 'ID'>, Tasks>(
      TasksService.dataSourceName,
      record
    );
    return result;
  }

  public static async update(id: string, changedFields: Partial<Omit<Tasks, 'ID'>>): Promise<IOperationResult<Tasks>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.updateRecordAsync<Partial<Omit<Tasks, 'ID'>>, Tasks>(
      TasksService.dataSourceName,
      id.toString(),
      changedFields
    );
    return result;
  }

  public static async delete(id: string): Promise<void> {
    await getPowerSdkInstance(dataSourcesInfo).Data.deleteRecordAsync(TasksService.dataSourceName, id.toString());
  }

  public static async get(id: string, options?: IGetOptions): Promise<IOperationResult<Tasks>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.retrieveRecordAsync<Tasks>(
      TasksService.dataSourceName,
      id.toString(),
      options
    );
    return result;
  }

  public static async getAll(options?: IGetAllOptions): Promise<IOperationResult<Tasks[]>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.retrieveMultipleRecordsAsync<Tasks>(
      TasksService.dataSourceName,
      options
    );
    return result;
  }
}
