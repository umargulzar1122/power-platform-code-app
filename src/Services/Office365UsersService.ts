/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

import { dataSourcesInfo } from '../../.power/appschemas/dataSourcesInfo';
import { getPowerSdkInstance } from '@pa-client/power-code-sdk/lib/';
import type { ClientPhotoMetadata } from '../Models/Office365UsersModel';
import type { EntityListResponse_IReadOnlyList_User } from '../Models/Office365UsersModel';
import type { GraphTrending } from '../Models/Office365UsersModel';
import type { GraphUser_V1 } from '../Models/Office365UsersModel';
import type { GraphUserUpdateable_V1 } from '../Models/Office365UsersModel';
import type { IOperationResult } from '@pa-client/power-code-sdk/lib/';
import type { LinklessEntityListResponse_List_Person } from '../Models/Office365UsersModel';
import type { ObjectWithoutType } from '../Models/Office365UsersModel';
import type { User } from '../Models/Office365UsersModel';

export class Office365UsersService {
  private static readonly dataSourceName = 'office365users';

  /**
   * Update my profile
   * Updates the profile of the current user
   */
  public static async UpdateMyProfile(body?: GraphUserUpdateable_V1): Promise<IOperationResult<void>> {
    const parameters: { body?: GraphUserUpdateable_V1 } = { body };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body?: GraphUserUpdateable_V1 }, void>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'UpdateMyProfile',
        parameters
      },
    });
    return result;
  }

  /**
   * Get my profile (V2)
   * Retrieves the profile of the current user. Learn more about available fields to select: https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/user#properties
   */
  public static async MyProfile_V2($select?: string): Promise<IOperationResult<GraphUser_V1>> {
    const parameters: { $select?: string } = { $select };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ $select?: string }, GraphUser_V1>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'MyProfile_V2',
        parameters
      },
    });
    return result;
  }

  /**
   * Update my profile photo
   * Updates the profile photo of the current user. The size of the photo must be less than 4 MB.
   */
  public static async UpdateMyPhoto(body: string, Content_Type: string): Promise<IOperationResult<void>> {
    const parameters: { body: string, Content_Type: string } = { body, Content_Type };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ body: string, Content_Type: string }, void>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'UpdateMyPhoto',
        parameters
      },
    });
    return result;
  }

  /**
   * Get my trending documents
   * Retrieves the trending documents for the signed in user
   */
  public static async MyTrendingDocuments($filter?: string, extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean): Promise<IOperationResult<{ value: GraphTrending[] }>> {
    const parameters: { $filter?: string, extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean } = { $filter, extractSensitivityLabel, fetchSensitivityLabelMetadata };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ $filter?: string, extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean }, { value: GraphTrending[] }>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'MyTrendingDocuments',
        parameters
      },
    });
    return result;
  }

  /**
   * Get relevant people
   * Get relevant people.
   */
  public static async RelevantPeople(userId: string): Promise<IOperationResult<LinklessEntityListResponse_List_Person>> {
    const parameters: { userId: string } = { userId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ userId: string }, LinklessEntityListResponse_List_Person>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'RelevantPeople',
        parameters
      },
    });
    return result;
  }

  /**
   * Get my profile (V1)
   * Retrieves the profile of the current user.
   */
  public static async MyProfile(): Promise<IOperationResult<User>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, User>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'MyProfile',
      },
    });
    return result;
  }

  /**
   * Get user profile (V1)
   * Retrieves the profile of a specific user.
   */
  public static async UserProfile(userId: string): Promise<IOperationResult<User>> {
    const parameters: { userId: string } = { userId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ userId: string }, User>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'UserProfile',
        parameters
      },
    });
    return result;
  }

  /**
   * Get user photo metadata
   * Get user photo metadata.
   */
  public static async UserPhotoMetadata(userId: string): Promise<IOperationResult<ClientPhotoMetadata>> {
    const parameters: { userId: string } = { userId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ userId: string }, ClientPhotoMetadata>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'UserPhotoMetadata',
        parameters
      },
    });
    return result;
  }

  /**
   * Get user photo (V1)
   * Retrieves the photo of the specified user if they have one.
   */
  public static async UserPhoto(userId: string): Promise<IOperationResult<string>> {
    const parameters: { userId: string } = { userId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ userId: string }, string>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'UserPhoto',
        parameters
      },
    });
    return result;
  }

  /**
   * Get manager (V1)
   * Retrieves the profile of the specified user's manager.
   */
  public static async Manager(userId: string): Promise<IOperationResult<User>> {
    const parameters: { userId: string } = { userId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ userId: string }, User>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'Manager',
        parameters
      },
    });
    return result;
  }

  /**
   * Get direct reports (V1)
   * Retrieves the user profiles of the specified user's direct reports.
   */
  public static async DirectReports(userId: string): Promise<IOperationResult<User[]>> {
    const parameters: { userId: string } = { userId };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ userId: string }, User[]>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'DirectReports',
        parameters
      },
    });
    return result;
  }

  /**
   * Search for users
   * Retrieves the user profiles that match the search term.
   */
  public static async SearchUser(searchTerm?: string, top?: number): Promise<IOperationResult<User[]>> {
    const parameters: { searchTerm?: string, top?: number } = { searchTerm, top };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ searchTerm?: string, top?: number }, User[]>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'SearchUser',
        parameters
      },
    });
    return result;
  }

  /**
   * Search for users (V2)
   * Retrieves the user profiles that match the search term (V2).
   */
  public static async SearchUserV2(searchTerm?: string, top?: number, isSearchTermRequired?: boolean, skipToken?: string): Promise<IOperationResult<EntityListResponse_IReadOnlyList_User>> {
    const parameters: { searchTerm?: string, top?: number, isSearchTermRequired?: boolean, skipToken?: string } = { searchTerm, top, isSearchTermRequired, skipToken };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ searchTerm?: string, top?: number, isSearchTermRequired?: boolean, skipToken?: string }, EntityListResponse_IReadOnlyList_User>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'SearchUserV2',
        parameters
      },
    });
    return result;
  }

  /**
   * Tests the connection
   * Tests the connection.
   */
  public static async TestConnection(): Promise<IOperationResult<void>> {
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<void, void>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'TestConnection',
      },
    });
    return result;
  }

  /**
   * Get user profile (V2)
   * Retrieves the profile of a specific user. Learn more about available fields to select: https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/user#properties
   */
  public static async UserProfile_V2(id: string, $select?: string): Promise<IOperationResult<GraphUser_V1>> {
    const parameters: { id: string, $select?: string } = { id, $select };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ id: string, $select?: string }, GraphUser_V1>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'UserProfile_V2',
        parameters
      },
    });
    return result;
  }

  /**
   * Get manager (V2)
   * Retrieves the profile of the specified user's manager. Learn more about available fields to select: https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/user#properties
   */
  public static async Manager_V2(id: string, $select?: string): Promise<IOperationResult<GraphUser_V1>> {
    const parameters: { id: string, $select?: string } = { id, $select };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ id: string, $select?: string }, GraphUser_V1>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'Manager_V2',
        parameters
      },
    });
    return result;
  }

  /**
   * Get direct reports (V2)
   * Retrieves the user profiles of the specified user's direct reports. Learn more about available fields to select: https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/user#properties
   */
  public static async DirectReports_V2(id: string, $select?: string, $top?: number): Promise<IOperationResult<{ value: GraphUser_V1[] }>> {
    const parameters: { id: string, $select?: string, $top?: number } = { id, $select, $top };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ id: string, $select?: string, $top?: number }, { value: GraphUser_V1[] }>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'DirectReports_V2',
        parameters
      },
    });
    return result;
  }

  /**
   * Get user photo (V2)
   * Retrieves the photo of the specified user if they have one
   */
  public static async UserPhoto_V2(id: string): Promise<IOperationResult<string>> {
    const parameters: { id: string } = { id };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ id: string }, string>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'UserPhoto_V2',
        parameters
      },
    });
    return result;
  }

  /**
   * Get trending documents
   * Retrieves the trending documents for a user
   */
  public static async TrendingDocuments(id: string, $filter?: string, extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean): Promise<IOperationResult<{ value: GraphTrending[] }>> {
    const parameters: { id: string, $filter?: string, extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean } = { id, $filter, extractSensitivityLabel, fetchSensitivityLabelMetadata };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ id: string, $filter?: string, extractSensitivityLabel?: boolean, fetchSensitivityLabelMetadata?: boolean }, { value: GraphTrending[] }>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'TrendingDocuments',
        parameters
      },
    });
    return result;
  }

  /**
   * Send an HTTP request
   * Construct a Microsoft Graph REST API request to invoke. These segments are supported: 1st segement: /me, /users/<userId> 2nd segment: messages, mailFolders, events, calendar, calendars, outlook, inferenceClassification. Learn more: https://docs.microsoft.com/en-us/graph/use-the-api.
   */
  public static async HttpRequest(Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string): Promise<IOperationResult<ObjectWithoutType>> {
    const parameters: { Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string } = { Uri, Method, Body, ContentType, CustomHeader1, CustomHeader2, CustomHeader3, CustomHeader4, CustomHeader5 };
    const result = await getPowerSdkInstance(dataSourcesInfo).Data.executeAsync<{ Uri: string, Method: string, Body?: string, ContentType?: string, CustomHeader1?: string, CustomHeader2?: string, CustomHeader3?: string, CustomHeader4?: string, CustomHeader5?: string }, ObjectWithoutType>({
      connectorOperation: {
        tableName: Office365UsersService.dataSourceName,
        operationName: 'HttpRequest',
        parameters
      },
    });
    return result;
  }
}
